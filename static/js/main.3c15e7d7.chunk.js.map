{"version":3,"sources":["waste.js","App.js","serviceWorker.js","index.js"],"names":["library","add","faStar","faSearch","Waste","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","submit","bind","assertThisInitialized","state","keyword","apiData","results","favourites","_this2","fetch","then","res","json","setState","e","target","value","_this$state","filteredResults","filter","result","keywords","toLowerCase","includes","item","push","_this3","length","react_default","a","createElement","className","map","index","key","react_fontawesome_index_es","size","icon","color","isFavourited","onClick","updateFavourite","title","parse","body","_this4","resultsMarkup","onSubmit","preventDefault","type","placeholder","onChange","updateKeyword","id","favouriteBar","Component","App","src_waste","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3c15e7d7.chunk.js","sourcesContent":["// David Voicu, 2019\n// This is the main file in charge of handling all of the logic and processes for the app.\n\nimport React, { Component } from \"react\";\nimport \"./waste.css\";\nimport { library } from \"@fortawesome/fontawesome-svg-core\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faStar, faSearch } from \"@fortawesome/free-solid-svg-icons\";\nimport parse from \"html-react-parser\";\n\n//add them to the library so that we can call them later\nlibrary.add(faStar);\nlibrary.add(faSearch);\n\nclass Waste extends Component {\n  //start by defining some variables in the constructor for the component\n  constructor(props) {\n    super(props);\n    this.submit = this.submit.bind(this);\n\n    this.state = {\n      keyword: \"\",\n      apiData: [],\n      results: [],\n      favourites: []\n    };\n  }\n\n  //componentDidMount() is invoked once the component is initialized, but before its rendered, so we should make our API call here\n  //the function takes the data from the API and converts it to a JSON object to be put into the array we created\n  componentDidMount() {\n    fetch(\n      \"https://secure.toronto.ca/cc_sr_v1/data/swm_waste_wizard_APR?limit=1000\"\n    )\n      .then(res => res.json())\n      .then(apiData => this.setState({ apiData }));\n  }\n\n  updateKeyword(e) {\n    this.setState({ keyword: e.target.value });\n  }\n\n  submit() {\n    const { keyword, apiData } = this.state;\n\n    //clear the results if the input is empty\n    if (keyword === \"\") {\n      this.setState({ results: [] });\n      return;\n    }\n\n    //otherwise find it in the list of keywords, and add it to the state results variable\n    const filteredResults = apiData.filter(result => {\n      const lowercased = result.keywords.toLowerCase();\n      return lowercased.includes(keyword.toLowerCase());\n    });\n\n    this.setState({ results: filteredResults });\n  }\n\n  isFavourited(item) {\n    const { favourites } = this.state;\n\n    if (favourites.includes(item)) {\n      return \"#23975e\";\n    } else return \"#bdbdbd\";\n  }\n\n  updateFavourite(item) {\n    const { favourites } = this.state;\n\n    let filteredResults = favourites;\n\n    if (favourites.includes(item)) {\n      filteredResults = favourites.filter(result => {\n        return item !== result;\n      });\n    } else filteredResults.push(item);\n\n    this.setState({ favourites: filteredResults });\n  }\n\n  favouriteBar() {\n    const { favourites } = this.state;\n\n    if (favourites.length > 0) {\n      return (\n        <div className=\"bottomStickyContainer\">\n          <h2>Favourites</h2>\n          {favourites.map((result, index) => (\n            <div key={index} className=\"favTile\">\n              <div className=\"bottomFavStar\">\n                <FontAwesomeIcon\n                  size=\"1x\"\n                  icon=\"star\"\n                  color={this.isFavourited(result)}\n                  onClick={() => this.updateFavourite(result)}\n                />\n              </div>\n              <div className=\"favResultTitle\">{result.title}</div>\n              <div className=\"favResultBody\">{parse(parse(result.body))}</div>\n            </div>\n          ))}\n        </div>\n      );\n    } else return <div />;\n  }\n\n  render() {\n    const { results } = this.state;\n    const resultsMarkup = results.map((result, index) => (\n      <div key={index} className=\"resultTile\">\n        <div className=\"favStar\">\n          <FontAwesomeIcon\n            size=\"1x\"\n            icon=\"star\"\n            color={this.isFavourited(result)}\n            onClick={() => this.updateFavourite(result)}\n          />\n        </div>\n        <div className=\"resultTitle\">{result.title}</div>\n        <div className=\"resultBody\">{parse(parse(result.body))}</div>\n      </div>\n    ));\n\n    return (\n      <div className=\"wasteApp\">\n        <div className=\"header\">\n          <h1>Toronto Waste Lookup</h1>\n        </div>\n\n        <div className=\"searchDiv\">\n          <form\n            onSubmit={e => {\n              this.submit();\n              e.preventDefault();\n            }}\n          >\n            <input\n              type=\"text\"\n              className=\"searchBar\"\n              placeholder=\"Enter a search term\"\n              onChange={e => this.updateKeyword(e)}\n            />\n            <button\n              type=\"submit\"\n              className=\"searchBtn\"\n              id=\"searchBtn\"\n              onClick={this.submit}\n            >\n              <i className=\"fa fa-search fa-3x\" />\n            </button>\n          </form>\n        </div>\n        {resultsMarkup}\n        {this.favouriteBar()}\n      </div>\n    );\n  }\n}\n\nexport default Waste;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport \"./waste.js\";\nimport Waste from \"./waste.js\";\n\nclass App extends Component {\n  render() {\n    return <Waste />;\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}