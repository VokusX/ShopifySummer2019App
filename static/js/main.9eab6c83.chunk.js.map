{"version":3,"sources":["Components/Result.js","Components/Waste.js","App.js","serviceWorker.js","index.js"],"names":["library","add","faStar","faSearch","Result","this","props","isFavourited","_this$props","title","body","onClick","react_default","a","createElement","className","react_fontawesome_index_es","size","icon","color","getFavouriteButtonColor","parse","Component","Waste","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleSubmitAction","bind","assertThisInitialized","state","loading","keyword","apiData","results","favourites","_this2","fetch","then","res","json","setState","e","target","value","_this$state","filteredResults","filter","result","keywords","toLowerCase","includes","item","favouritedResults","push","_this3","length","map","Components_Result","isFavourite","updateFavourite","_this4","_this$state2","resultsMarkup","headerMarkup","onSubmit","preventDefault","type","placeholder","onChange","updateKeyword","id","renderFavouriteBar","App","src_Components_Waste","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9eab6c83.chunk.js","sourcesContent":["// David Voicu, 2019\n// This is file stores the Result container that gets displayed to the user with the info from the API\n\nimport React, { Component } from \"react\";\nimport \"./Results.css\";\nimport { library } from \"@fortawesome/fontawesome-svg-core\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faStar, faSearch } from \"@fortawesome/free-solid-svg-icons\";\nimport parse from \"html-react-parser\";\n\nlibrary.add(faStar);\nlibrary.add(faSearch);\n\nclass Result extends Component {\n  getFavouriteButtonColor() {\n    const { isFavourited } = this.props;\n    if (isFavourited) {\n      return \"#23975e\";\n    } else return \"#bdbdbd\";\n  }\n\n  render() {\n    const { title, body, onClick } = this.props;\n    return (\n      <div className=\"resultTile\">\n        <div className=\"favStar\">\n          <FontAwesomeIcon\n            size=\"1x\"\n            icon=\"star\"\n            color={this.getFavouriteButtonColor()}\n            onClick={onClick}\n          />\n        </div>\n        <div className=\"resultTitle\">{title}</div>\n        <div className=\"resultBody\">{parse(parse(body))}</div>\n      </div>\n    );\n  }\n}\n\nexport default Result;\n","// David Voicu, 2019\n// This is the main file in charge of handling all of the logic and processes for the app.\n\nimport React, { Component } from \"react\";\nimport \"./Waste.css\";\nimport Result from \"./Result.js\";\nimport { library } from \"@fortawesome/fontawesome-svg-core\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faStar, faSearch } from \"@fortawesome/free-solid-svg-icons\";\nimport parse from \"html-react-parser\";\n\nlibrary.add(faStar);\nlibrary.add(faSearch);\n\nclass Waste extends Component {\n  constructor(props) {\n    super(props);\n    this.handleSubmitAction = this.handleSubmitAction.bind(this);\n\n    this.state = {\n      loading: true,\n      keyword: \"\",\n      apiData: [],\n      results: [],\n      favourites: []\n    };\n  }\n\n  // componentDidMount() is invoked once the component is initialized, but before its rendered, so we should make our API call here\n  // The function takes the data from the API and converts it to a JSON object to be put into the array we created\n  componentDidMount() {\n    fetch(\n      \"https://secure.toronto.ca/cc_sr_v1/data/swm_waste_wizard_APR?limit=1000\"\n    )\n      .then(res => res.json())\n      .then(apiData => this.setState({ apiData, loading: false }));\n  }\n\n  updateKeyword(e) {\n    this.setState({ keyword: e.target.value });\n  }\n\n  handleSubmitAction() {\n    const { keyword, apiData } = this.state;\n\n    if (keyword === \"\") {\n      this.setState({ results: [] });\n      return;\n    }\n\n    const filteredResults = apiData.filter(result => {\n      const lowercased = result.keywords.toLowerCase();\n      return (\n        lowercased.includes(keyword.toLowerCase()) ||\n        result.title.toLowerCase().includes(keyword.toLowerCase())\n      );\n    });\n\n    this.setState({ results: filteredResults });\n  }\n\n  isFavourite(item) {\n    const { favourites } = this.state;\n\n    if (favourites.includes(item)) {\n      return true;\n    } else return false;\n  }\n\n  updateFavourite(item) {\n    const { favourites } = this.state;\n\n    let favouritedResults = favourites;\n\n    if (favourites.includes(item)) {\n      favouritedResults = favourites.filter(result => {\n        return item !== result;\n      });\n    } else favouritedResults.push(item);\n\n    this.setState({ favourites: favouritedResults });\n  }\n\n  renderFavouriteBar() {\n    const { favourites } = this.state;\n\n    if (favourites.length > 0) {\n      return (\n        <div className=\"bottomStickyContainer\">\n          <h2>Favourites</h2>\n          {favourites.map(result => (\n            <Result\n              isFavourited={this.isFavourite(result)}\n              onClick={() => {\n                this.updateFavourite(result);\n              }}\n              title={result.title}\n              body={result.body}\n            />\n          ))}\n        </div>\n      );\n    } else return <div />;\n  }\n\n  render() {\n    const { results, loading } = this.state;\n\n    const resultsMarkup = results.map(result => (\n      <Result\n        isFavourited={this.isFavourite(result)}\n        onClick={() => {\n          this.updateFavourite(result);\n        }}\n        title={result.title}\n        body={result.body}\n      />\n    ));\n\n    const headerMarkup = (\n      <div className=\"header\">\n        <h1>Toronto Waste Lookup</h1>\n      </div>\n    );\n\n    if (loading)\n      return (\n        <div>\n          {headerMarkup}\n          <div className=\"loading\">\n            <h3>Loading...</h3>\n          </div>\n        </div>\n      );\n\n    return (\n      <div>\n        {headerMarkup}\n        <form\n          className=\"searchDiv\"\n          onSubmit={e => {\n            this.handleSubmitAction();\n            e.preventDefault();\n          }}\n        >\n          <input\n            type=\"text\"\n            className=\"searchBar\"\n            placeholder=\"Enter a search term\"\n            onChange={e => this.updateKeyword(e)}\n          />\n          <button\n            type=\"submit\"\n            className=\"searchBtn\"\n            id=\"searchBtn\"\n            onClick={this.handleSubmitAction}\n          >\n            <i className=\"fa fa-search fa-3x\" />\n          </button>\n        </form>\n\n        {resultsMarkup}\n        {this.renderFavouriteBar()}\n      </div>\n    );\n  }\n}\n\nexport default Waste;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Waste from \"./Components/Waste.js\";\n\nclass App extends Component {\n  render() {\n    return <Waste />;\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}